#include "../dv/types.h"
#include <array>
#include <cstring>
#include <iomanip>
#include <ios>
#include <iostream>

constexpr std::array<uint8_t, 588> data = {
    0xB2, 0x4D, 0x22, 0x48, 0xC0, 0x16, 0x28, 0x26, 0xC8, 0x55, 0x2D, 0x16, 0xAE, 0xCC, 0x2A, 0x78, 
    0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x30, 0x05, 0xBD, 0xCE, 0x8E, 0x2E, 0x39, 0x66, 0x12, 0x78, 0x31, 
    0xB0, 0x20, 0x61, 0xB3, 0xAE, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x34, 0x67, 0xC0, 0x45, 0x6B, 0xB7, 
    0xCA, 0x8E, 0x26, 0x19, 0x26, 0x1E, 0x4C, 0xA1, 0xF0, 0x33, 0x1D, 0xD0, 0xAE, 0xCC, 0x2A, 0x78, 
    0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x31, 0x07, 0xC7, 0xBE, 0x6E, 0x22, 0x48, 0x23, 0x1B, 0x0C, 0x77, 
    0x80, 0x50, 0x1C, 0xF2, 0xCE, 0x8E, 0x22, 0x09, 0xE4, 0x1E, 0x4C, 0x20, 0xF4, 0x45, 0x7E, 0xD5, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x3C, 0x67, 0xC0, 0x33, 0x7F, 0xBF, 0xCE, 0xCE, 0xAC, 0x31, 
    0x47, 0x1E, 0x58, 0xE0, 0xF0, 0x32, 0x21, 0xB3, 0xAE, 0x8C, 0x2E, 0x68, 0x22, 0x1F, 0x1C, 0x37, 
    0x84, 0x34, 0x26, 0xF6, 0xCE, 0xCE, 0x2A, 0x29, 0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x45, 0x04, 0xDC, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x46, 0x05, 0xCB, 0xCE, 0xCE, 0x26, 0x19, 
    0x27, 0x12, 0x6C, 0x70, 0xB0, 0x33, 0x28, 0xFC, 0xAE, 0xEC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x50, 0x6F, 0xB3, 0xCE, 0xCE, 0x2E, 0x39, 0x67, 0x1E, 0x58, 0xE0, 0xF0, 0x45, 0x07, 0xBE, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x34, 0x67, 0xC0, 0x47, 0x71, 0xD2, 0xCE, 0x8E, 0x2E, 0x39, 
    0x66, 0x12, 0x78, 0x31, 0xB0, 0x45, 0x1F, 0xDA, 0xAE, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x7D, 0xBF, 0xCE, 0x8E, 0xA0, 0x01, 0xC4, 0x1E, 0x4C, 0x20, 0xF4, 0x45, 0x0B, 0xC0, 
    0xAA, 0xCC, 0x2E, 0x68, 0x23, 0x91, 0x3C, 0xE6, 0xC4, 0x24, 0x0E, 0xC1, 0xCE, 0x8E, 0x2E, 0x39, 
    0x66, 0x12, 0x78, 0x31, 0xB0, 0x55, 0x2D, 0x16, 0xAE, 0xEC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x65, 0xA9, 0xCE, 0xCE, 0x2A, 0x29, 0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x5F, 0x7E, 0xA7, 
    0xAA, 0x8C, 0x2E, 0x68, 0x22, 0x1F, 0x1C, 0x37, 0x84, 0x45, 0x7E, 0xA5, 0xCE, 0x8E, 0x22, 0x09, 
    0xE4, 0x1E, 0x4C, 0x20, 0xF4, 0x42, 0x7A, 0xE9, 0xAE, 0xCC, 0x2E, 0x68, 0x23, 0x13, 0x3C, 0xE6, 
    0xC4, 0x45, 0x7C, 0xA1, 0xCE, 0xCE, 0x2A, 0x29, 0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x43, 0x76, 0xBD, 
    0xAA, 0x8C, 0x2E, 0x68, 0x22, 0x9D, 0x14, 0x37, 0x84, 0x45, 0x7B, 0xA4, 0xCE, 0xCE, 0xA8, 0x21, 
    0x85, 0x1E, 0x58, 0x61, 0xF4, 0x3E, 0x60, 0xA2, 0xAE, 0xEC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x7E, 0xA5, 0xCE, 0x8E, 0x26, 0x19, 0x26, 0x1E, 0x4C, 0xA1, 0xF0, 0x45, 0x78, 0xBD, 
    0xAA, 0x8C, 0x2E, 0x68, 0x22, 0x9D, 0x1C, 0x37, 0x84, 0x45, 0x78, 0xAA, 0xCE, 0xCE, 0x2A, 0x29, 
    0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x27, 0x14, 0xA2, 0xAE, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x78, 0xAA, 0xCE, 0x8E, 0x2E, 0x39, 0x66, 0x12, 0x78, 0x31, 0xB0, 0x5F, 0x7F, 0xA3, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x45, 0x7F, 0xBC, 0xCE, 0x8E, 0x26, 0x19, 
    0x26, 0x1E, 0x4C, 0xA1, 0xF0, 0x3A, 0x61, 0xC3, 0xAE, 0xEC, 0xA8, 0x70, 0xC1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x61, 0xB3, 0xCE, 0x8E, 0x2E, 0x39, 0x66, 0x12, 0x78, 0x31, 0xB0, 0x38, 0x1B, 0xB3, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x45, 0x06, 0xD7, 0xCE, 0xCE, 0x2A, 0x29, 
    0xA5, 0x9C, 0x50, 0x61, 0xF4, 0x5D, 0x7A, 0xA1, 0xAE, 0xCC, 0x2E, 0x68, 0x23, 0x13, 0x3C, 0xE6, 
    0xC4, 0x55, 0x2D, 0x16, 0xCE, 0xCE, 0x26, 0x19, 0x27, 0x12, 0x6C, 0x70, 0xB0, 0x45, 0x1F, 0xDF, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x3C, 0x67, 0xC0, 0x25, 0x1C, 0x9E, 0xCE, 0xCE, 0x2A, 0x29, 
    0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x25, 0x4F, 0x93, 0xAE, 0xAC, 0x2E, 0x68, 0x22, 0x1F, 0x1C, 0x37, 
    0x84, 0x70, 0x0B, 0xDA, 0xCE, 0xCE, 0xA8, 0x21, 0x85, 0x1E, 0x58, 0x61, 0xF4, 0x55, 0x55, 0x55, 
    0x55, 0xC8, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// The TX message is sent in the slow data frames as follows:
// @..
// ...
// A..
// ...
// B..
// ...
// C..
// ...
// It seems the ICOM radios always send these paired, so data comes in
// like @..... but might be interleaved with other data.

int main() {
	int num_frames = data.size() / 12;

	char tx_msg[21] = {0};
	char aprs[1024] = {0};

	int txi = 0;
	int aprsi = 0;
	bool in_tx_msg = false;
	bool in_aprs_msg = false;

	// This implementation is incorrect when it comes to APRS data
	// handling.
	dv::rf_frame f;
	for (int i = 0; i < num_frames; i++) {
		std::memcpy(&f, &data[i*12], sizeof(dv::rf_frame));
		auto fd = f.decode();
		std::cout << fd.data << " ";
		std::cout << std::setw(2) << std::hex << std::internal << (int)fd.data[0] << " ";
		std::cout << std::setw(2) << std::hex << std::internal << (int)fd.data[1] << " ";
		std::cout << std::setw(2) << std::hex << std::internal << (int)fd.data[2] << " ";
		std::cout << std::endl;
		if (fd.is_end() || fd.is_preend() || fd.is_sync()) continue;
		if (in_tx_msg) {
			std::memcpy(&tx_msg[txi], fd.data, 3);
			txi += 3;
			txi = txi % 20;
			in_tx_msg = false;
		} else if (in_aprs_msg) {
			std::memcpy(&aprs[aprsi], fd.data, 3);
			aprsi += 3;
			in_aprs_msg = false;
		} else if (fd.data[0] == '@') {
			std::memcpy(&tx_msg[0], &fd.data[1], 2);
			txi = 2;
			in_tx_msg = true;
		} else if (fd.data[0] == 'A') {
			std::memcpy(&tx_msg[5], &fd.data[1], 2);
			txi = 7;
			in_tx_msg = true;
		} else if (fd.data[0] == 'B') {
			std::memcpy(&tx_msg[10], &fd.data[1], 2);
			txi = 12;
			in_tx_msg = true;
		} else if (fd.data[0] == 'C') {
			std::memcpy(&tx_msg[15], &fd.data[1], 2);
			txi = 17;
			in_tx_msg = true;
		} else if (fd.data[0] & dv::F_DATA) {
			std::memcpy(&aprs[aprsi], &fd.data[1], 2);
			aprsi += 2;
			in_aprs_msg = true;
		}
	}

	std:: cout << tx_msg << std::endl;
	std::cout << aprs << std::endl;
}
