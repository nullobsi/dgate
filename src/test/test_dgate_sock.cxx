#include "dgate/dgate.h"
#include "dv/types.h"
#include <cerrno>
#include <cstring>
#include <iostream>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/un.h>
#include <thread>
#include <unistd.h>
#include <thread>
#include <chrono>
#include <array>

constexpr std::array<uint8_t, 576> data = {
    0xB2, 0x4D, 0x22, 0x48, 0xC0, 0x16, 0x28, 0x26, 0xC8, 0x55, 0x2D, 0x16, 0xAE, 0xCC, 0x2A, 0x78, 
    0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x30, 0x05, 0xBD, 0xCE, 0x8E, 0x2E, 0x39, 0x66, 0x12, 0x78, 0x31, 
    0xB0, 0x20, 0x61, 0xB3, 0xAE, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x34, 0x67, 0xC0, 0x45, 0x6B, 0xB7, 
    0xCA, 0x8E, 0x26, 0x19, 0x26, 0x1E, 0x4C, 0xA1, 0xF0, 0x33, 0x1D, 0xD0, 0xAE, 0xCC, 0x2A, 0x78, 
    0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x31, 0x07, 0xC7, 0xBE, 0x6E, 0x22, 0x48, 0x23, 0x1B, 0x0C, 0x77, 
    0x80, 0x50, 0x1C, 0xF2, 0xCE, 0x8E, 0x22, 0x09, 0xE4, 0x1E, 0x4C, 0x20, 0xF4, 0x45, 0x7E, 0xD5, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x3C, 0x67, 0xC0, 0x33, 0x7F, 0xBF, 0xCE, 0xCE, 0xAC, 0x31, 
    0x47, 0x1E, 0x58, 0xE0, 0xF0, 0x32, 0x21, 0xB3, 0xAE, 0x8C, 0x2E, 0x68, 0x22, 0x1F, 0x1C, 0x37, 
    0x84, 0x34, 0x26, 0xF6, 0xCE, 0xCE, 0x2A, 0x29, 0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x45, 0x04, 0xDC, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x46, 0x05, 0xCB, 0xCE, 0xCE, 0x26, 0x19, 
    0x27, 0x12, 0x6C, 0x70, 0xB0, 0x33, 0x28, 0xFC, 0xAE, 0xEC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x50, 0x6F, 0xB3, 0xCE, 0xCE, 0x2E, 0x39, 0x67, 0x1E, 0x58, 0xE0, 0xF0, 0x45, 0x07, 0xBE, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x34, 0x67, 0xC0, 0x47, 0x71, 0xD2, 0xCE, 0x8E, 0x2E, 0x39, 
    0x66, 0x12, 0x78, 0x31, 0xB0, 0x45, 0x1F, 0xDA, 0xAE, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x7D, 0xBF, 0xCE, 0x8E, 0xA0, 0x01, 0xC4, 0x1E, 0x4C, 0x20, 0xF4, 0x45, 0x0B, 0xC0, 
    0xAA, 0xCC, 0x2E, 0x68, 0x23, 0x91, 0x3C, 0xE6, 0xC4, 0x24, 0x0E, 0xC1, 0xCE, 0x8E, 0x2E, 0x39, 
    0x66, 0x12, 0x78, 0x31, 0xB0, 0x55, 0x2D, 0x16, 0xAE, 0xEC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x65, 0xA9, 0xCE, 0xCE, 0x2A, 0x29, 0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x5F, 0x7E, 0xA7, 
    0xAA, 0x8C, 0x2E, 0x68, 0x22, 0x1F, 0x1C, 0x37, 0x84, 0x45, 0x7E, 0xA5, 0xCE, 0x8E, 0x22, 0x09, 
    0xE4, 0x1E, 0x4C, 0x20, 0xF4, 0x42, 0x7A, 0xE9, 0xAE, 0xCC, 0x2E, 0x68, 0x23, 0x13, 0x3C, 0xE6, 
    0xC4, 0x45, 0x7C, 0xA1, 0xCE, 0xCE, 0x2A, 0x29, 0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x43, 0x76, 0xBD, 
    0xAA, 0x8C, 0x2E, 0x68, 0x22, 0x9D, 0x14, 0x37, 0x84, 0x45, 0x7B, 0xA4, 0xCE, 0xCE, 0xA8, 0x21, 
    0x85, 0x1E, 0x58, 0x61, 0xF4, 0x3E, 0x60, 0xA2, 0xAE, 0xEC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x7E, 0xA5, 0xCE, 0x8E, 0x26, 0x19, 0x26, 0x1E, 0x4C, 0xA1, 0xF0, 0x45, 0x78, 0xBD, 
    0xAA, 0x8C, 0x2E, 0x68, 0x22, 0x9D, 0x1C, 0x37, 0x84, 0x45, 0x78, 0xAA, 0xCE, 0xCE, 0x2A, 0x29, 
    0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x27, 0x14, 0xA2, 0xAE, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x78, 0xAA, 0xCE, 0x8E, 0x2E, 0x39, 0x66, 0x12, 0x78, 0x31, 0xB0, 0x5F, 0x7F, 0xA3, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x45, 0x7F, 0xBC, 0xCE, 0x8E, 0x26, 0x19, 
    0x26, 0x1E, 0x4C, 0xA1, 0xF0, 0x3A, 0x61, 0xC3, 0xAE, 0xEC, 0xA8, 0x70, 0xC1, 0x13, 0x3C, 0x67, 
    0xC0, 0x45, 0x61, 0xB3, 0xCE, 0x8E, 0x2E, 0x39, 0x66, 0x12, 0x78, 0x31, 0xB0, 0x38, 0x1B, 0xB3, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x13, 0x3C, 0x67, 0xC0, 0x45, 0x06, 0xD7, 0xCE, 0xCE, 0x2A, 0x29, 
    0xA5, 0x9C, 0x50, 0x61, 0xF4, 0x5D, 0x7A, 0xA1, 0xAE, 0xCC, 0x2E, 0x68, 0x23, 0x13, 0x3C, 0xE6, 
    0xC4, 0x55, 0x2D, 0x16, 0xCE, 0xCE, 0x26, 0x19, 0x27, 0x12, 0x6C, 0x70, 0xB0, 0x45, 0x1F, 0xDF, 
    0xAA, 0xCC, 0x2A, 0x78, 0xE1, 0x91, 0x3C, 0x67, 0xC0, 0x25, 0x1C, 0x9E, 0xCE, 0xCE, 0x2A, 0x29, 
    0xA5, 0x1E, 0x58, 0x61, 0xF4, 0x25, 0x4F, 0x93, 0xAE, 0xAC, 0x2E, 0x68, 0x22, 0x1F, 0x1C, 0x37, 
    0x84, 0x70, 0x0B, 0xDA, 0xCE, 0xCE, 0xA8, 0x21, 0x85, 0x1E, 0x58, 0x61, 0xF4, 0x55, 0x55, 0x55, 
    // 0x55, 0xC8, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

	using namespace std::chrono_literals;
int main() {
	sockaddr_un addr;
	addr.sun_family = AF_UNIX;
	std::memcpy(addr.sun_path, "dgate.sock", 11);

	int fd = socket(PF_UNIX, SOCK_SEQPACKET, 0);
	if (fd == -1) return errno;

	int error = connect(fd, (sockaddr*)&addr, sizeof(sockaddr_un));
	if (error) return errno;

	dv::header h;
	h.flags[0] = 0;
	h.flags[1] = 0;
	h.flags[2] = 0;

	std::memcpy(h.destination_rptr_cs, "DIRECT  ", 8);
	std::memcpy(h.departure_rptr_cs, "DIRECT  ", 8);
	std::memcpy(h.companion_cs, "       I", 8);
	std::memcpy(h.own_cs, "KO6JXH  ", 8);
	std::memcpy(h.own_cs_ext, "52P ", 4);

	h.crc_ccitt[0] = 0x04;
	h.crc_ccitt[1] = 0x74;

	dgate::packet p;
	dgate::packet pout;
	p.module = 'C';
	p.type = dgate::P_HEADER;
	p.header.id = 0xBEEF;
	p.header.h = h;

	write(fd, &p, dgate::packet_header_size);
	int count = read(fd, &pout, dgate::packet_header_size);
	std::cout << (count == dgate::packet_header_size) << std::endl;

	p.type = dgate::P_VOICE;
	p.voice.count = 0;
	p.voice.seqno = 0;
	p.voice.id = 0xBEEF;
	int total = data.size() / 12;
	int i;
	for (i = 0; i < total-1; i++) {
		std::memcpy(&p.voice.f, &data.data()[i*12], 12);
		write(fd, &p, dgate::packet_voice_size);
		count = read(fd, &pout, dgate::packet_voice_size);
		std::cout << count << " ";
		p.voice.count ++;
		p.voice.seqno = dgate::next_seqno(p.voice.seqno);
		std::this_thread::sleep_for(20ms);
	}
	std::cout << std::endl;

	int tmp = p.voice.count;

	p.type = dgate::P_VOICE_END;
	p.voice_end.bit_errors = 0;
	p.voice_end.count = tmp;
	p.voice_end.id = 0xBEEF;

	std::memcpy(&p.voice_end.f, &data.data()[i*12], 12);
	//write(fd, &p, dgate::packet_voice_end_size);
	//count = read(fd, &pout, dgate::packet_voice_end_size);
	//std::cout << std::to_string(count) << " " << std::to_string(pout.voice_end.bit_errors) << std::endl;
}
