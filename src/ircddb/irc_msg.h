#ifndef _IRCMessage_h
#define _IRCMessage_h

#include <cstdint>
#include <optional>
#include <string>
#include <vector>

#define IRCMESSAGE_INVALID "IRCMESSAGE_INVALID"

namespace ircddb {

struct irc_params {
	std::vector<std::string> list;
	std::optional<std::string> trailer;
};

enum irc {
	RPL_WELCOME = 1,
	RPL_YOURHOST,
	RPL_CREATED,
	RPL_MYINFO,
	RPL_BOUNCE,

	RPL_TRACELINK = 200,
	RPL_TRACECONNECTING,
	RPL_TRACEHANDSHAKE,
	RPL_TRACEUNKNOWN,
	RPL_TRACEOPERATOR,
	RPL_TRACEUSER,
	RPL_TRACESERVER,
	RPL_TRACESERVICE,
	RPL_TRACENEWTYPE,
	RPL_TRACECLASS,
	RPL_TRACERECONNECT,
	RPL_STATSLINKINFO,
	RPL_STATSCOMMANDS,

	RPL_ENDOFSTATS = 219,

	RPL_UMODEIS = 221,

	RPL_SERVLIST = 234,
	RPL_SERVLISTEND,

	RPL_STATSUPTIME = 242,
	RPL_STATSOLINE,

	RPL_LUSERCLIENT = 251,
	RPL_LUSEROP,
	RPL_LUSERUNKNOWN,
	RPL_LUSERCHANNELS,
	RPL_LUSERME,
	RPL_ADMINME,
	RPL_ADMINLOC1,
	RPL_ADMINLOC2,
	RPL_ADMINEMAIL,

	RPL_TRACELOG = 261,
	RPL_TRACEEND,
	RPL_TRYAGAIN,

	RPL_AWAY = 301,
	RPL_USERHOST,
	RPL_ISON,

	RPL_UNAWAY = 305,
	RPL_NOWAWAY,

	RPL_WHOISUSER = 311,
	RPL_WHOISSERVER,
	RPL_WHOISOPERATOR,

	RPL_WHOWASUSER = 314,
	RPL_ENDOFWHO,

	RPL_WHOISIDLE = 317,
	RPL_ENDOFWHOIS,
	RPL_WHOISCHANNELS,

	RPL_LIST = 322,
	RPL_LISTEND,

	RPL_CHANNELMODEIS = 324,
	RPL_UNIQOPIS = 325,

	RPL_NOTOPIC = 331,
	RPL_TOPIC = 332,

	RPL_INVITING = 341,
	RPL_SUMMONING,

	RPL_INVITELIST = 346,
	RPL_ENDOFINVITELIST,
	RPL_EXCEPTLIST,
	RPL_ENDOFEXCEPTLIST,

	RPL_VERSION = 351,
	RPL_WHOREPLY,
	RPL_NAMREPLY,

	RPL_LINKS = 364,
	RPL_ENDOFLINKS,
	RPL_ENDOFNAMES,
	RPL_BANLIST,
	RPL_ENDOFBANLIST,
	RPL_ENDOFWHOWAS,

	RPL_INFO = 371,
	RPL_MOTD,

	RPL_ENDOFINFO = 374,
	RPL_MOTDSTART,
	RPL_ENDOFMOTD,

	RPL_YOUREOPER = 381,
	RPL_REHASHING,
	RPL_YOURESERVICE,

	RPL_TIME = 391,
	RPL_USERSTART,
	RPL_USERS,
	RPL_ENDOFUSERS,
	RPL_NOUSERS,

	ERR_NOSUCHNICK = 401,
	ERR_NOSUCHSERVER,
	ERR_NOSUCHCHANNEL,
	ERR_CANNOTSENDTOCHAN,
	ERR_TOOMANYCHANNELS,
	ERR_WASNOSUCHNICK,
	ERR_TOOMANYTARGETS,
	ERR_NOSUCHSERVICE,
	ERR_NOORIGIN,

	ERR_NORECIPIENT = 411,
	ERR_NOTEXTTOSEND,
	ERR_NOTOPLEVEL,
	ERR_WILDTOPLEVEL,
	ERR_BADMASK,

	ERR_UNKNOWNCOMMAND = 421,
	ERR_NOMOTD,
	ERR_NOADMININFO,
	ERR_FILEERROR,

	ERR_NONICKNAMEGIVEN = 431,
	ERR_ERRONEUSNICKNAME,
	ERR_NICKNAMEINUSE,

	ERR_NICKCOLLISION = 436,
	ERR_UNAVAILRESOURCE = 437,

	ERR_USERNOTINCHANNEL = 441,
	ERR_NOTONCHANNEL = 442,
	ERR_USERONCHANNEL,
	ERR_NOLOGIN,
	ERR_SUMMONDISABLED,
	ERR_USERDISABLED,

	ERR_NOTREGISTERED = 451,

	ERR_NEEDMOREPARAMS = 461,
	ERR_ALREADYREGISTERED,
	ERR_NOPERMFORHOST,

	ERR_PASSWDMISMATCH,
	ERR_YOUREBANNEDCREEP,
	ERR_YOUWILLBEBANNED,
	ERR_KEYSET,

	ERR_CHANNELISFULL = 471,
	ERR_UNKNOWNMODE,
	ERR_INVITEONLYCHAN,
	ERR_BANNEDFROMCHAN,
	ERR_BADCHANNELKEY,
	ERR_BADCHANMASK,
	ERR_NOCHANMODES,
	ERR_BANLISTFULL,

	ERR_NOPRIVILEGES = 481,
	ERR_CHANOPRIVSNEEDED,
	ERR_CANTKILLSERVER,
	ERR_RESTRICTED,
	ERR_UNIQOPPRIVSNEEDED,

	ERR_NOOPERHOST = 491,

	ERR_UMODEUNKNOWNFLAG = 501,
	ERR_USERSDONTMATCH,
};

struct irc_prefix {
	std::optional<std::string> host;
	std::optional<std::string> user;
	std::optional<std::string> nick;
};

struct irc_msg {
	irc_msg() = default;
	irc_msg(const std::string& raw);
	irc_msg(const std::string& to, const std::string& msg);
	irc_msg(const std::string& command, const std::vector<std::string>& params, const std::optional<std::string>& trailer = {});

	std::optional<std::string> prefix;
	std::optional<irc_prefix> pfx;

	std::string command;
	std::optional<irc_params> params;

	std::optional<uint_least16_t> code;

	friend std::ostream& operator<<(std::ostream& os, const irc_msg& msg);
	std::string compose() const;
};

}// namespace ircddb

#endif
